#!/bin/bash

path=$PWD
urls=""
severity="critical,high,medium,low"
templates=""
output="nuclie_split"
line_nbr=500
occurence=100 

function prepare_template(){
	# cd $path
	echo "step prepare template"
	rm -rf ./ncl_temp &> /dev/null
	echo $1 #&& pwd
	cp -r $1 ./ncl_temp 
	cd  ./ncl_temp
	if [[ -f ../.templates ]]; then
		for i in $(cat ../.templates);do
			find ./ -iname "$i" -exec rm -rf {} \;
		done
	else 
		echo "there is no template file !!!!"
	fi
	cd ..
}

function split_host(){
	echo "split the file Hosts  $2 $1 "
	if [[ $(find ./ -maxdepth 0 -iname "host_*" |wc -w ) -eq 0 ]]; then
		split -l $2 $1  host_
	else 
		echo "host_* file already exits"
	fi
	
}

function scan(){
	# cd $path 
	for file in $(ls host_* );do
		echo "start scan for $file $1 $2"
		nuclei -l $file  -t ./ncl_temp -c $1   -stats -timeout 5  -severity $2   -retries 0 -silent| anew $3 |notify -silent
		rm -rf $file
	done
}

function update_template_file(){
	cd ./ncl_temp && find ./ -iname "*.yaml"  | rev | cut -d'/' -f1 | rev |sort -u   >> ../.templates && cd -
	cat .templates |sort -uo .templates
	rm -rf ./ncl_temp  &> /dev/null
}

function help(){
	echo "usage:"
	echo "exp : ncl_script -l urls.txt -t ~/nuclei-templates -s high -o out_put.txt -c 500  -n 100"
	echo -e "\t l \t  url or file (require)"
	echo -e "\t t \t  directory templates (require)"
	echo -e "\t s \t severity  (default all : critical,high,medium,low)"
	echo -e "\t o \t output file (default nuclei_split)"
	echo -e "\t c \t nbr of occurences (default 100) "
	echo -e "\t n \t nbr of split line (default 500)"
	echo -e "\t a \t run nuclei with all template "
}


function all(){
	#nuclei template 
	nuclei -update-templates
	prepare_template ~/nuclei-templates
	split_host Hosts  400
	scan 1000  critical,high,medium,low  out_nuclei
	update_template_file
	
	# pikpiktemplates 
	cd ~/tools/pikpik && git pull && cd -
	prepare_template ~/tools/pikpik/nuclei
	split_host Hosts  400
	scan 1000 critical,high,medium,low  out_nuclei
	update_template_file
}


while getopts ":l:s:o:t:n:c:a" OPTION
	do
		case $OPTION in
			l)
					urls="$OPTARG" 
					;;
			a)
					all ;
					exit 
					;;
			s)
					severity="$OPTARG"
					;;
			t)
					templates="$OPTARG"
					;;
			o)
					output="$OPTARG"
					;;
			n)
					line_nbr="$OPTARG"
					;;
			c)
					occurence="$OPTARG"
					;;

			:)
					help
					exit 1
					;;
			\?)
					help
					exit 1
					;;

		esac
	done






if [[ $templates == "" || $urls == "" ]];then
	echo "the template directory and the urls list are required !!!"
	help 
	exit ;
else 
	# echo " $templates  $urls  $line_nbr  $occurence $severity $output "
	prepare_template $templates
	split_host $urls  $line_nbr
	scan $occurence $severity $output
	update_template_file
	echo "scan done "| notify -silent
fi







